{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c04eb7b6-4d99-4ccf-b149-d54acb9d47ea",
   "metadata": {},
   "source": [
    "# Comments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "deed06b0-8ff1-40e9-943f-615f51c9352a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7436aa01-dac4-4f64-a193-7f4d85314f4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "** single comments (#,##,###)\n",
    "** multiple comments(\"\"\"  \"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44ab12bd-f1e2-489b-abb2-48725d3f5d20",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "8904a8d2-10b5-4839-9627-34e786818f15",
   "metadata": {},
   "source": [
    "# variable=value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1af686d3-df7f-48f7-8ce8-b750a712cf72",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=10\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffec5268-feae-4021-99b9-24f0528a801d",
   "metadata": {},
   "outputs": [],
   "source": [
    "or"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8a289952-afda-4dd0-87f1-aae00bda5cda",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "a= 10\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "615ec6ef-398c-4817-b886-3daa7db1fbbd",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "cannot unpack non-iterable int object",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[10], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m## multiple variables and one value\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m a,b,c\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(a,b,c)\n",
      "\u001b[0;31mTypeError\u001b[0m: cannot unpack non-iterable int object"
     ]
    }
   ],
   "source": [
    "## multiple variables and one value (camot be done )\n",
    "a,b,c=1\n",
    "print(a,b,c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fb73f4d-6bdc-4f73-b76d-9e65d90a0e42",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1f6738a7-3f66-44be-9b06-f0ab5ad1320c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 2 3\n"
     ]
    }
   ],
   "source": [
    "## multiple variables and multiple value (can do)\n",
    "a,b,c=1,2,3\n",
    "print(a,b,c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e157e30-07b1-4f73-abb9-d25ad7df6847",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d17416ef-585d-4843-a725-38f11f8a42de",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "cannot unpack non-iterable int object",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[12], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m a,b,c\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28mprint\u001b[39m(a,b,c)\n",
      "\u001b[0;31mTypeError\u001b[0m: cannot unpack non-iterable int object"
     ]
    }
   ],
   "source": [
    "a,b,c=1\n",
    "print(a,b,c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "87abc06e-fc33-434c-a8c1-4b8ad6516af4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 2 3\n"
     ]
    }
   ],
   "source": [
    "a,b,c=1,2,3\n",
    "print(a,b,c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c848df89-1424-44fa-aaeb-e13e7da4d1da",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "cannot unpack non-iterable int object",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[14], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m a,b,c\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28mprint\u001b[39m(a,b,c)\n",
      "\u001b[0;31mTypeError\u001b[0m: cannot unpack non-iterable int object"
     ]
    }
   ],
   "source": [
    "a,b,c=1\n",
    "print(a,b,c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e56d6e14-8389-41bd-bc89-e4349ded2a0b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 2 3\n"
     ]
    }
   ],
   "source": [
    "a,b,c=1,2,3\n",
    "print(a,b,c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3c64d077-2d00-4304-a77c-da6e8a4c0f9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3)\n"
     ]
    }
   ],
   "source": [
    "## ## one variables and multiple value\n",
    "c=1,2,3\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d8117987-f03e-4830-974b-396c813c2e44",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 4, 5)\n"
     ]
    }
   ],
   "source": [
    "c=1,2,4,5,\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "3f1cbf27-ce6a-4913-8333-fd3224fa599a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3, 4, 5)\n"
     ]
    }
   ],
   "source": [
    "b=1,2,3,4,5\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b62b2416-9783-439d-87fb-14a55178c203",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22 22 22\n"
     ]
    }
   ],
   "source": [
    "# equal\n",
    "c=b=z=22\n",
    "print(c,b,z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "54f5de13-ae50-4047-bff9-1c9f6231b51b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22\n"
     ]
    }
   ],
   "source": [
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "1fe1b57c-6efe-4148-b97f-81ee8abe0977",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22\n"
     ]
    }
   ],
   "source": [
    "print(z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7e9c71a-e0c5-485b-ae96-2622e649c158",
   "metadata": {},
   "outputs": [],
   "source": [
    "or"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "90d5d3d5-5305-4074-aa0f-f64bafc997ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(22, 34)\n"
     ]
    }
   ],
   "source": [
    "c=b=d=22,34\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a1e2d47-3a36-498e-96d8-d19495f87517",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2d919f6b-d04d-4046-a9d6-c96941f62ee9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Rules in vaiables\n",
    "** start with alphabets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "36e2e27a-8eb5-426d-92cd-94afc358cd52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "abc=1\n",
    "print(abc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9fb8bcb5-43ec-449e-922e-33c94df01227",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3)\n"
     ]
    }
   ],
   "source": [
    "ABC=1,2,3\n",
    "print(ABC)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "8d4bd899-1a1d-4136-89bb-41dd990fbf44",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 3, 4)\n"
     ]
    }
   ],
   "source": [
    "abc=1,3,4\n",
    "print(abc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "add820ed-2deb-4ab4-9898-d9fc158f1d9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "## can't start with numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "0be391a4-9184-4356-9927-22c96f862be9",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "cannot assign to literal here. Maybe you meant '==' instead of '='? (3919317860.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[43], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    123=2\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m cannot assign to literal here. Maybe you meant '==' instead of '='?\n"
     ]
    }
   ],
   "source": [
    "123=2\n",
    "print(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "be0f719f-b187-458b-9cb0-cde1e7862126",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid decimal literal (2599718443.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[44], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    123a=1,2,3\u001b[0m\n\u001b[0m      ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid decimal literal\n"
     ]
    }
   ],
   "source": [
    "123a=1,2,3\n",
    "print(123a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4aeae72-433a-4a2b-ab8c-709b6e51fae5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cbce8a96-fea1-4518-9bfc-bfb2ce6120dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "## start with underscore (_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "270b1a97-9722-40f3-aa3f-2bb1048bbd6f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 3, 4)\n"
     ]
    }
   ],
   "source": [
    "_abc=1,3,4\n",
    "print(_abc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "6bbf46bd-38a3-46d8-8c9e-8de5657a51e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 23)\n"
     ]
    }
   ],
   "source": [
    "_ABC=1,23\n",
    "print(_ABC)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a7c394d-c08f-43ee-8130-6273fef23e8b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84f31b53-8e49-46c1-a863-38f0f6a3494f",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Case sensitive"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "b074d28a-b84d-4b31-9834-4e28c1c66d95",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n"
     ]
    }
   ],
   "source": [
    "python=12\n",
    "PYTHON=23\n",
    "print(python)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "34126784-a944-49cc-bef7-dc0ca494be16",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23\n"
     ]
    }
   ],
   "source": [
    "print(PYTHON)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "25f6ff76-9886-4d2c-b486-599e991411b4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95e57f78-c3e6-4ad0-b043-989c028b5291",
   "metadata": {},
   "outputs": [],
   "source": [
    "## to know the memory address id() method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "62d5bf6a-08e5-4a2b-b803-814693c2b8e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140490259986880\n"
     ]
    }
   ],
   "source": [
    "abc12=1,3\n",
    "print(id(abc12))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "52f3af81-fd7f-480e-8754-dd4ca2d4e46c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140490357326768\n"
     ]
    }
   ],
   "source": [
    "abc=23\n",
    "print(id(abc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "3b4b365a-6a12-4604-a626-cddd05ee234a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140490357326768\n"
     ]
    }
   ],
   "source": [
    "abc=23\n",
    "print(id(abc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b173076f-934b-48cc-adf9-35ec8ac28939",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
